const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

//exports.counterFile = path.join(__dirname, 'counter.txt');
//counter.counterFile

exports.create = (text, callback) => {
  //start saving new todos on the hard drive
  //Each new todo entry must be saved in its own file
  //Use the unique id generated by getNextUniqueId to create a file path inside the dataDir. Each time a
  // POST request is made to the collection route, save a file with the todo item in this folder.
  // Only save the todo text in the file, the id of the todo item is encoded into its filename
  // -- DO NOT STORE AN OBJECT.

  // var id = counter.getNextUniqueId(); //this probably needs to take a cb
  // items[id] = text;
  // callback(null, { id, text });

  //invoke our getNextUniqueID(cb)
  //pathpath name should be ourId.txt
  counter.getNextUniqueId((err, data) => {
    console.log('string id-data', data);

    let route = path.join(exports.dataDir, `${data}.txt`);
    console.log('filepath: ', route);
    fs.writeFile(route, text, (err) => {
      if (err) {
        console.log('error');
      } else {
        callback(null, data);
      }
    });
  });

  // let filepath = path.join(exports.dataDir, 'counter.txt');
  // console.log('filepath: ', filepath);
};

exports.readAll = (callback) => {
  var data = _.map(items, (text, id) => {
    return { id, text };
  });
  callback(null, data);
};

exports.readOne = (id, callback) => {
  var text = items[id];
  if (!text) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback(null, { id, text });
  }
};

exports.update = (id, text, callback) => {
  var item = items[id];
  if (!item) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    items[id] = text;
    callback(null, { id, text });
  }
};

exports.delete = (id, callback) => {
  var item = items[id];
  delete items[id];
  if (!item) {
    // report an error if item not found
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback();
  }
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');
//should create new dir data inside datastore

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};

//Creating New Todos
// The next step is to start saving new todos on the hard drive by refactoring create.
// Each new todo entry must be saved in its own file. Use the unique id generated by
// getNextUniqueId to create a file path inside the dataDir. Each time a
// POST request is made to the collection route, save a file with the todo item in this folder.
// Only save the todo text in the file, the id of the todo item is encoded into its filename
// -- DO NOT STORE AN OBJECT.

// Verify this is working by checking to see:

// The value that is saved in counter.txt increases with each new todo item created
// The number of files in dataDir increases with each new todo item created
// The contents of each file contain only the text of that todo item